package assignment1.cs3560.gregkalaydjian;
import java.util.*;
import java.io.*;

public class SimulationDriver 
{
    //This method will run the program and use classes Student, VotingService, and Question.
    public static void main(String[] args)
    {
        //integer value to keep track of the program restarting
        int restartValue = 1;
        while(restartValue == 1)
        {
            //declarations
            //Create keyboard object for any user input.
            Scanner keyboard = new Scanner(System.in);
            //Instantiate student object from Student class.
            Student student = new Student();
            //Instantiate question object from Question class.
            Question question = new Question();
            //Instantiate answerList object from VotingService class.
            VotingService votingService = new VotingService();
            //Random class for random value for amountOfCandidates.
            Random r = new Random();

            //String value to keep track of the program restarting
            String restartValueString = "";

            //randomly generate the amount of questions up to 5 that is not zero questions.
            int amountOfQuestions = 0;
            while(amountOfQuestions == 0)
            { 
                amountOfQuestions = r.nextInt(6);
            }
            int amountOfAnswers = amountOfQuestions;

            //randomly generate candidates out of 45 students that is not 0 students.
            int amountOfCandidates = 0;
            while (amountOfCandidates == 0)
            {
                amountOfCandidates = r.nextInt(46);
            }

            //create idArray which stores ID's of candidates.
            String[] idArray = new String[amountOfCandidates];
            //create idNameArray which stores Name ID's of candidates.
            String[] nameArray = new String[amountOfCandidates];
            //create questionsArray which stores the questions.
            String[] questionsArray = new String[amountOfQuestions];
            //create answersArray which stores the answers.
            String[] answersArray = new String[amountOfAnswers];
            //create studentAnswersArray which stores the students answers
            String[][] studentAnswersArrayGenerated = new String[amountOfCandidates][amountOfQuestions];
            //create studentAnswersCorrectArrayGenerated which stores if the generated student answers are correct.
            int[][] studentAnswersCorrectArrayGenerated = new int[amountOfCandidates][amountOfQuestions];
            //create correctAmountPerQuestion to track correct amounts per question
            int[] correctAmountPerQuestion = new int[amountOfQuestions];

            //fill idArray with unique ID's (String array).
            idArray = student.getIDs(amountOfCandidates);

            //fill nameArray with unique name ID's (String array).
            nameArray = student.getNameIDs(idArray, amountOfCandidates);

            //fill questionsArray with questions from the question list.
            questionsArray = question.questionList(amountOfQuestions);

            //fil answersArray with answers from the answer list.
            answersArray = votingService.answerList(amountOfAnswers);

            //fill studentAnswersArray with student attempts
            studentAnswersArrayGenerated = votingService.generateAnswers(amountOfCandidates, amountOfQuestions);

            //fill studentAnswersCorrectArrayGenerated by checking studentAnswersArray with correct answersArray
            studentAnswersCorrectArrayGenerated = votingService.checkCorrect(amountOfCandidates, amountOfQuestions, studentAnswersArrayGenerated, answersArray);

            //display candidates involved and their ID
            student.displayCandidatesAndIDs(amountOfCandidates, nameArray, idArray);

            //display questions to candidates
            question.displayQuestions(questionsArray, amountOfQuestions);

            //Printing out message to the user
            System.out.println("RANDOMLY GENERATED QUESTION AMOUNTS '1-5' AND ANSWERS:");

            //fill correctAmountPerQuestion array with statstics based off of generated answers
            correctAmountPerQuestion = votingService.displayStatistics(amountOfCandidates, amountOfQuestions, studentAnswersCorrectArrayGenerated, answersArray);

            //For each question, display correct amount. 
            votingService.displayAmountCorrect(correctAmountPerQuestion, amountOfQuestions, amountOfCandidates);

            //Using ID and problem number, send user input as an OPTION to replace old answer and tell them if it's correct.
            votingService.changeAnswer(amountOfCandidates, amountOfQuestions, studentAnswersArrayGenerated,
                    answersArray, idArray, nameArray);

            //Allow user to restart with a new pool of students and question amounts.
            System.out.println("You have reached the end of the program. Type '1' to generate a new pool, type 0 and enter to End.");
            
            //colect restartValue for while loop to restart the 
            restartValueString = keyboard.nextLine();
            restartValue = Integer.parseInt(restartValueString);
        }
    }
}
